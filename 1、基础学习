
1. 原子性（Atomicity）
事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。

回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。

2. 一致性（Consistency）
数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。

3. 隔离性（Isolation）
一个事务所做的修改在最终提交以前，对其它事务是不可见的。

4. 持久性（Durability）
一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。

系统发生奔溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。

事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：

只有满足一致性，事务的执行结果才是正确的。
在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。
在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。
事务满足持久化是为了能应对系统崩溃的情况。


example1:Oracle
1、原子性：提供事务的完整管理模型，在系统的运行过程中实现事务的提交和回滚功能，以支持运行原子性，并且提供WAL日志和恢复机制
2、一致性：基于封锁技术的ss2pl（强两阶段提交协议）,支持多并发下的元数据一致；通过WAL和恢复机制，支持故障前后的数据一致。
3、隔离性：快照和多版本构成的MVCC技术实现并发事务对同一数据项的隔离。能实现一定并发下的不同场景的隔离，没有真正实现可串行化隔离。
4、持久性：预写WAL日志、恢复等技术实现数据的持久化存储。

(Oracle的封锁技术）
